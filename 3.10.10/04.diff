commit 0244acec6f7eebb16cddf12e8201e18d2a47a933
Author: Alexander K <ak@natsys-lab.com>
Date:   Wed Sep 17 19:36:54 2014 +0400

    Manage skb ownership on Tempesta side rather than on LInux TCP/IP

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index dec1748c..f620738a 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -418,8 +418,12 @@ struct sk_buff {
 	 * layer. Please put your private variables there. If you
 	 * want to keep them across layers you have to do a skb_clone()
 	 * first. This is owned by whoever has the skb queued ATM.
+	 *
+	 * Tempesta. Extend the control block from original 48 bytes to
+	 * 64, so we can place our own control block at the end of @cb
+	 * and safely pass the skb to TCP and IP layers.
 	 */
-	char			cb[48] __aligned(8);
+	char			cb[64] __aligned(8);
 
 	unsigned long		_skb_refdst;
 #ifdef CONFIG_XFRM
@@ -2933,5 +2937,38 @@ static inline bool skb_head_is_locked(const struct sk_buff *skb)
 {
 	return !skb->head_frag || skb_cloned(skb);
 }
+
+/*
+ * ------------------------------------------------------------------------
+ * 		Tempesta FW
+ * ------------------------------------------------------------------------
+ */
+/*
+ * We use this additional skb list to be able to reference skbs which are
+ * processed by standard Linux TCP/IP stack w/o skb cloning.
+ */
+typedef struct {
+	struct sk_buff	*next;
+	struct sk_buff	*prev;
+} SsSkbCb;
+
+#define TFW_SKB_CB(s)		((SsSkbCb *)((s)->cb + sizeof((s)->cb)	\
+						      - sizeof(SsSkbCb)))
+
+/**
+ * Whether the @skb is passed to application layer.
+ *
+ * Linux TCP/IP code owns all socket buffers and can call __kfree_skb() at any
+ * time. Meantime, we need to pass the buffers to Tempesta code to avoid data
+ * copying.
+ */
+static inline bool
+ss_skb_passed(const struct sk_buff *skb)
+{
+	SsSkbCb *scb = TFW_SKB_CB(skb);
+
+	return scb->next || scb->prev;
+}
+
 #endif	/* __KERNEL__ */
 #endif	/* _LINUX_SKBUFF_H */
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 1c1738cc..ce216524 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -619,6 +619,10 @@ static void skb_release_all(struct sk_buff *skb)
 
 void __kfree_skb(struct sk_buff *skb)
 {
+	/* Don't free Tempesta owned socket buffers. */
+	if (unlikely(ss_skb_passed(skb)))
+		return;
+
 	skb_release_all(skb);
 	kfree_skbmem(skb);
 }
