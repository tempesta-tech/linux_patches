commit 8c3bf0a28edd614255d151003fbe846dd188a8ad
Author: Alexander K <ak@natsys-lab.com>
Date:   Mon Mar 2 01:33:42 2015 +0300

    Tempesta memory reservation

diff --git a/.config b/.config
index 3750fb8a..56f9a9b9 100644
--- a/.config
+++ b/.config
@@ -351,8 +351,8 @@ CONFIG_CALGARY_IOMMU=y
 # CONFIG_CALGARY_IOMMU_ENABLED_BY_DEFAULT is not set
 CONFIG_SWIOTLB=y
 CONFIG_IOMMU_HELPER=y
-CONFIG_MAXSMP=y
-CONFIG_NR_CPUS=4096
+# CONFIG_MAXSMP is not set
+CONFIG_NR_CPUS=256
 CONFIG_SCHED_SMT=y
 CONFIG_SCHED_MC=y
 # CONFIG_PREEMPT_NONE is not set
@@ -385,7 +385,7 @@ CONFIG_AMD_NUMA=y
 CONFIG_X86_64_ACPI_NUMA=y
 CONFIG_NODES_SPAN_OTHER_NODES=y
 # CONFIG_NUMA_EMU is not set
-CONFIG_NODES_SHIFT=10
+CONFIG_NODES_SHIFT=3
 CONFIG_ARCH_SPARSEMEM_ENABLE=y
 CONFIG_ARCH_SPARSEMEM_DEFAULT=y
 CONFIG_ARCH_SELECT_MEMORY_MODEL=y
@@ -465,6 +465,7 @@ CONFIG_HOTPLUG_CPU=y
 CONFIG_ARCH_ENABLE_MEMORY_HOTPLUG=y
 CONFIG_ARCH_ENABLE_MEMORY_HOTREMOVE=y
 CONFIG_USE_PERCPU_NUMA_NODE_ID=y
+CONFIG_FORCE_MAX_ZONEORDER=15
 
 #
 # Power management and ACPI options
@@ -3176,12 +3177,13 @@ CONFIG_SECURITY=y
 CONFIG_SECURITYFS=y
 CONFIG_SECURITY_NETWORK=y
 CONFIG_SECURITY_NETWORK_XFRM=y
-# CONFIG_SECURITY_PATH is not set
+CONFIG_SECURITY_PATH=y
 # CONFIG_SECURITY_SELINUX is not set
 # CONFIG_SECURITY_SMACK is not set
 # CONFIG_SECURITY_TOMOYO is not set
 # CONFIG_SECURITY_APPARMOR is not set
 # CONFIG_SECURITY_YAMA is not set
+CONFIG_SECURITY_TEMPESTA=y
 CONFIG_INTEGRITY=y
 # CONFIG_INTEGRITY_SIGNATURE is not set
 CONFIG_IMA=y
@@ -3189,8 +3191,9 @@ CONFIG_IMA_MEASURE_PCR_IDX=10
 CONFIG_IMA_AUDIT=y
 # CONFIG_IMA_APPRAISE is not set
 # CONFIG_EVM is not set
-CONFIG_DEFAULT_SECURITY_DAC=y
-CONFIG_DEFAULT_SECURITY=""
+CONFIG_DEFAULT_SECURITY_TEMPESTA=y
+# CONFIG_DEFAULT_SECURITY_DAC is not set
+CONFIG_DEFAULT_SECURITY="tempesta"
 CONFIG_XOR_BLOCKS=m
 CONFIG_ASYNC_CORE=m
 CONFIG_ASYNC_MEMCPY=m
@@ -3389,7 +3392,6 @@ CONFIG_HAS_IOMEM=y
 CONFIG_HAS_IOPORT=y
 CONFIG_HAS_DMA=y
 CONFIG_CHECK_SIGNATURE=y
-CONFIG_CPUMASK_OFFSTACK=y
 CONFIG_CPU_RMAP=y
 CONFIG_DQL=y
 CONFIG_NLATTR=y
diff --git a/Documentation/kernel-parameters.txt b/Documentation/kernel-parameters.txt
index 2fe6e767..c8d2d8e1 100644
--- a/Documentation/kernel-parameters.txt
+++ b/Documentation/kernel-parameters.txt
@@ -2967,6 +2967,11 @@ bytes respectively. Such letter suffixes can also be entirely omitted.
 
 	tdfx=		[HW,DRM]
 
+	tempesta_pages=	[KNL]
+			Order of pages reserved on each NUMA node for
+			Tempesta database. Must be multiple greater or equal
+			to 9 (one Tempesta DB extent size, 4KB * 2 ^ 9 = 2MB).
+
 	test_suspend=	[SUSPEND]
 			Specify "mem" (for Suspend-to-RAM) or "standby" (for
 			standby suspend) as the system sleep state to briefly
diff --git a/arch/x86/Kconfig b/arch/x86/Kconfig
index fe120da2..a7daef04 100644
--- a/arch/x86/Kconfig
+++ b/arch/x86/Kconfig
@@ -268,6 +268,12 @@ config ZONE_DMA
 
 	  If unsure, say Y.
 
+config FORCE_MAX_ZONEORDER
+	int "MAX_ORDER (11 - 15)"  if SECURITY_TEMPESTA
+	range 11 15  if SECURITY_TEMPESTA
+	default "15" if SECURITY_TEMPESTA
+	default "11"
+
 config SMP
 	bool "Symmetric multi-processing support"
 	---help---
diff --git a/include/linux/tempesta_fw.h b/include/linux/tempesta.h
similarity index 75%
rename from include/linux/tempesta_fw.h
rename to include/linux/tempesta.h
index 05723985..35dd9dc6 100644
--- a/include/linux/tempesta_fw.h
+++ b/include/linux/tempesta.h
@@ -2,6 +2,7 @@
  * Linux interface for Tempesta FW (FireWall and/or FrameWork).
  *
  * Copyright (C) 2012-2014 NatSys Lab. (info@natsys-lab.com).
+ * Copyright (C) 2015 Tempesta Technologies.
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License as published by
@@ -17,8 +18,8 @@
  * this program; if not, write to the Free Software Foundation, Inc., 59
  * Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
-#ifndef __TEMPESTA_FW_H__
-#define __TEMPESTA_FW_H__
+#ifndef __TEMPESTA_H__
+#define __TEMPESTA_H__
 
 #include <net/sock.h>
 
@@ -26,8 +27,18 @@ typedef struct {
 	int (*sock_tcp_rcv)(struct sock *sk, struct sk_buff *skb);
 } TempestaOps;
 
+typedef struct {
+	unsigned long	addr;
+	unsigned long	pages;
+} TempestaMapping;
+
+/* Security hooks. */
 void tempesta_register_ops(TempestaOps *tops);
 void tempesta_unregister_ops(TempestaOps *tops);
 
-#endif /* __TEMPESTA_FW_H__ */
+/* Memory management. */
+void tempesta_reserve_pages(void);
+int tempesta_get_mapping(int node, TempestaMapping **tm);
+
+#endif /* __TEMPESTA_H__ */
 
diff --git a/init/main.c b/init/main.c
index 9484f4ba..c6d79bbe 100644
--- a/init/main.c
+++ b/init/main.c
@@ -74,6 +74,7 @@
 #include <linux/ptrace.h>
 #include <linux/blkdev.h>
 #include <linux/elevator.h>
+#include <linux/tempesta.h>
 
 #include <asm/io.h>
 #include <asm/bugs.h>
@@ -637,6 +638,14 @@ asmlinkage void __init start_kernel(void)
 
 	ftrace_init();
 
+	/*
+	 * Tempesta: reserve pages at so early stage to get continous
+	 * address space of physical pages.
+	 */
+#ifdef CONFIG_SECURITY_TEMPESTA
+	tempesta_reserve_pages();
+#endif
+
 	/* Do the rest non-__init'ed, we're now alive */
 	rest_init();
 }
diff --git a/mm/Makefile b/mm/Makefile
index 72c5acb9..4fc1df74 100644
--- a/mm/Makefile
+++ b/mm/Makefile
@@ -58,3 +58,4 @@ obj-$(CONFIG_DEBUG_KMEMLEAK) += kmemleak.o
 obj-$(CONFIG_DEBUG_KMEMLEAK_TEST) += kmemleak-test.o
 obj-$(CONFIG_CLEANCACHE) += cleancache.o
 obj-$(CONFIG_MEMORY_ISOLATION) += page_isolation.o
+obj-$(CONFIG_SECURITY_TEMPESTA) += tempesta_mm.o
diff --git a/mm/init-mm.c b/mm/init-mm.c
index e1567c39..a56a8519 100644
--- a/mm/init-mm.c
+++ b/mm/init-mm.c
@@ -23,4 +23,3 @@ struct mm_struct init_mm = {
 	.mmlist		= LIST_HEAD_INIT(init_mm.mmlist),
 	INIT_MM_CONTEXT(init_mm)
 };
-EXPORT_SYMBOL(init_mm);
diff --git a/mm/mlock.c b/mm/mlock.c
index 8ec4b192..79b7cf7d 100644
--- a/mm/mlock.c
+++ b/mm/mlock.c
@@ -443,7 +443,6 @@ int __mm_populate(unsigned long start, unsigned long len, int ignore_errors)
 		up_read(&mm->mmap_sem);
 	return ret;	/* 0 or negative error code */
 }
-EXPORT_SYMBOL(__mm_populate);
 
 SYSCALL_DEFINE2(mlock, unsigned long, start, size_t, len)
 {
diff --git a/mm/mmap.c b/mm/mmap.c
index 54fb1946..8d25fdc6 100644
--- a/mm/mmap.c
+++ b/mm/mmap.c
@@ -1348,7 +1348,6 @@ unsigned long do_mmap_pgoff(struct file *file, unsigned long addr,
 		*populate = len;
 	return addr;
 }
-EXPORT_SYMBOL(do_mmap_pgoff);
 
 SYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,
 		unsigned long, prot, unsigned long, flags,
diff --git a/mm/tempesta_mm.c b/mm/tempesta_mm.c
new file mode 100644
index 00000000..5cce4608
--- /dev/null
+++ b/mm/tempesta_mm.c
@@ -0,0 +1,109 @@
+/**
+ *		Tempesta Memory Reservation
+ *
+ * Copyright (C) 2015 Tempesta Technologies.
+ *
+ * This program is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License,
+ * or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+ * FOR A PARTICULAR PURPOSE.
+ * See the GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along with
+ * this program; if not, write to the Free Software Foundation, Inc., 59
+ * Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+#include <linux/gfp.h>
+#include <linux/tempesta.h>
+#include <linux/topology.h>
+
+#define MAX_PGORDER		25	/* 128GB per one table */
+#define MIN_PGORDER		9	/* 2MB - one extent */
+#define DEFAULT_PGORDER		17	/* 512MB */
+#define PGCHUNKS		(1 << (MAX_PGORDER - MAX_ORDER + 1))
+
+static int pgorder = DEFAULT_PGORDER;
+static TempestaMapping map[MAX_NUMNODES];
+
+static int __init
+tempesta_setup_pages(char *str)
+{
+	get_option(&str, &pgorder);
+	if (pgorder < MIN_PGORDER)
+		pgorder = MIN_PGORDER;
+
+	return 1;
+}
+__setup("tempesta_pages=", tempesta_setup_pages);
+
+void __init
+tempesta_reserve_pages(void)
+{
+	static struct page *pg_arr[PGCHUNKS];
+	struct page *p;
+	int i, node, n, chunk_order;
+
+	chunk_order = min_t(int, MAX_ORDER - 1, pgorder);
+	n = 1 << (pgorder - chunk_order);
+
+	/*
+	 * Linux buddy allocator returns blocks aligned on the their size
+	 * and returned addresses grow from top to bottom.
+	 */
+	for_each_node_with_cpus(node) {
+		for (i = n - 1; i >= 0; --i) {
+			p = alloc_pages_node(node, GFP_KERNEL|__GFP_ZERO,
+					     chunk_order);
+			if (!p) {
+				pr_err("Tempesta: cannot allocate page set"
+				       " at node %d\n", node);
+				goto err;
+			}
+			if (i < n - 1
+			    && page_address(p) + PAGE_SIZE * (1 << chunk_order)
+			       != page_address(pg_arr[i + 1]))
+			{
+				pr_err("Tempesta: sparse page set alloc:"
+				       " %p:%p %lx\n", page_address(p),
+				     page_address(pg_arr[i + 1]),
+				     PAGE_SIZE * (1 << chunk_order));
+				goto err;
+			}
+
+			pr_info("Tempesta: alloc %lu pages starting at address"
+				" %p at node %d\n",
+			     1UL << chunk_order, page_address(p), node);
+
+			pg_arr[i] = p;
+			if (!map[node].addr) {
+				map[node].addr = (unsigned long)page_address(p);
+				map[node].pages = 1 << pgorder;
+			}
+		}
+	}
+
+	BUG_ON(!pg_arr[0]);
+	return;
+err:
+	for (--node; node >= 0; --node)
+		for (i = 0; i < n; ++i)
+			if (pg_arr[i])
+				__free_pages(pg_arr[i], chunk_order);
+}
+
+int
+tempesta_get_mapping(int node, TempestaMapping **tm)
+{
+	if (!map[node].addr)
+		return -ENOMEM;
+
+	*tm = &map[node];
+
+	return 0;
+}
+EXPORT_SYMBOL(tempesta_get_mapping);
+
diff --git a/security/tempesta/Kconfig b/security/tempesta/Kconfig
index 6f4b76de..901dc02e 100644
--- a/security/tempesta/Kconfig
+++ b/security/tempesta/Kconfig
@@ -5,5 +5,5 @@ config SECURITY_TEMPESTA
 	default y
 	help
 	  This selects Tempesta FW security module.
-	  Further information my be found at https://github.com/natsys/tempesta
+	  Further information may be found at https://github.com/natsys/tempesta
 	  If you are unsure how to answer this question, answer N.
diff --git a/security/tempesta/tempesta_lsm.c b/security/tempesta/tempesta_lsm.c
index bc3e735a..721d1f2c 100644
--- a/security/tempesta/tempesta_lsm.c
+++ b/security/tempesta/tempesta_lsm.c
@@ -19,8 +19,7 @@
  */
 #include <linux/security.h>
 #include <linux/spinlock.h>
-
-#include <linux/tempesta_fw.h>
+#include <linux/tempesta.h>
 
 static TempestaOps __rcu *tempesta_ops;
 static DEFINE_SPINLOCK(tops_lock);
