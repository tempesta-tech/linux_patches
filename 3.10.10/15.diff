commit 06f1b61596ed62f027f905419c8b7edc82b78cab
Author: Aleksey Baulin <ab@natsys-lab.com>
Date:   Sun Aug 2 22:42:47 2015 +0300

    Use SKB reference counting when freeing SKBs in socket's TX path
    
    In the socket layer Linux considers itself the sole owner of SKBs that are
    in RX and TX queues. SKBs are taken out from RX queue and passed to Tempesta,
    and Tempesta becomes the new sole owner of these SKBs. When Tempesta puts
    these SKBs out to TX queue, the kernel becomes an extra owner of the SKBs
    in addition to Tempesta. Make sure the kernel is aware of that and uses
    kfree_skb() instead of __kfree_skb() in the socket's TX path.

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index f620738a..69ae157c 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -631,6 +631,7 @@ static inline struct rtable *skb_rtable(const struct sk_buff *skb)
 }
 
 extern void kfree_skb(struct sk_buff *skb);
+extern void kfree_skb_untraced(struct sk_buff *skb);
 extern void kfree_skb_list(struct sk_buff *segs);
 extern void skb_tx_error(struct sk_buff *skb);
 extern void consume_skb(struct sk_buff *skb);
diff --git a/include/net/sock.h b/include/net/sock.h
index 66772cf8..436c4d85 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1417,7 +1417,7 @@ static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
 	sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
 	sk->sk_wmem_queued -= skb->truesize;
 	sk_mem_uncharge(sk, skb->truesize);
-	__kfree_skb(skb);
+	kfree_skb_untraced(skb);
 }
 
 /* Used by processes to "lock" a socket state, so that
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index fe0705fa..58647023 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -619,9 +619,8 @@ static void skb_release_all(struct sk_buff *skb)
 
 void __kfree_skb(struct sk_buff *skb)
 {
-	/* Don't free Tempesta owned socket buffers. */
-	if (unlikely(ss_skb_passed(skb)))
-		return;
+	/* Can't free buffers owned by Tempesta. */
+	BUG_ON((unlikely(ss_skb_passed(skb))));
 
 	skb_release_all(skb);
 	kfree_skbmem(skb);
@@ -700,6 +699,28 @@ void consume_skb(struct sk_buff *skb)
 }
 EXPORT_SYMBOL(consume_skb);
 
+/**
+ *	kfree_skb_untraced - free an skbuff
+ *	@skb: buffer to free
+ *
+ *	Drop a reference to the buffer and free it if the usage count has
+ *	hit zero. Functions identically to kfree_skb() or consume_skb(),
+ *	but kfree_skb_untraced() doesn't make any assumptions on semantics,
+ *	i.e. whether the frame is being dropped after a failure or consumed.
+ *	Consequently, it doesn't contain any instrumentation for tracing.
+ */
+void kfree_skb_untraced(struct sk_buff *skb)
+{
+	if (unlikely(!skb))
+		return;
+	if (likely(atomic_read(&skb->users) == 1))
+		smp_rmb();
+	else if (likely(!atomic_dec_and_test(&skb->users)))
+		return;
+	__kfree_skb(skb);
+}
+EXPORT_SYMBOL(kfree_skb_untraced);
+
 static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 {
 	new->tstamp		= old->tstamp;
