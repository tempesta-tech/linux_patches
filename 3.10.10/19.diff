commit a02af78028ff65fa8836811a55f1776a545edcfa
Author: Alexander K <ak@natsys-lab.com>
Date:   Sat Sep 19 12:33:35 2015 +0300

    Replace security hook by our own when socket is not fully created, but addresses are accessible for Tempesta

diff --git a/include/linux/security.h b/include/linux/security.h
index c8cce6cc..46864918 100644
--- a/include/linux/security.h
+++ b/include/linux/security.h
@@ -1630,7 +1630,7 @@ struct security_operations {
 	void (*sock_graft) (struct sock *sk, struct socket *parent);
 	int (*inet_conn_request) (struct sock *sk, struct sk_buff *skb,
 				  struct request_sock *req);
-	int (*inet_csk_clone) (struct sock *newsk, const struct request_sock *req);
+	void (*inet_csk_clone) (struct sock *newsk, const struct request_sock *req);
 	void (*inet_conn_established) (struct sock *sk, struct sk_buff *skb);
 	int (*secmark_relabel_packet) (u32 secid);
 	void (*secmark_refcount_inc) (void);
@@ -2581,7 +2581,7 @@ void security_req_classify_flow(const struct request_sock *req, struct flowi *fl
 void security_sock_graft(struct sock*sk, struct socket *parent);
 int security_inet_conn_request(struct sock *sk,
 			struct sk_buff *skb, struct request_sock *req);
-int security_inet_csk_clone(struct sock *newsk,
+void security_inet_csk_clone(struct sock *newsk,
 			const struct request_sock *req);
 void security_inet_conn_established(struct sock *sk,
 			struct sk_buff *skb);
@@ -2737,10 +2737,9 @@ static inline int security_inet_conn_request(struct sock *sk,
 	return 0;
 }
 
-static inline int security_inet_csk_clone(struct sock *newsk,
+static inline void security_inet_csk_clone(struct sock *newsk,
 			const struct request_sock *req)
 {
-	return 0;
 }
 
 static inline void security_inet_conn_established(struct sock *sk,
diff --git a/include/linux/tempesta.h b/include/linux/tempesta.h
index 829e4de8..f5f3f38f 100644
--- a/include/linux/tempesta.h
+++ b/include/linux/tempesta.h
@@ -35,6 +35,7 @@ typedef struct {
 } TempestaMapping;
 
 /* Security hooks. */
+int tempesta_new_clntsk(struct sock *newsk);
 void tempesta_register_ops(TempestaOps *tops);
 void tempesta_unregister_ops(TempestaOps *tops);
 
diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c
index d743b740..6acb541c 100644
--- a/net/ipv4/inet_connection_sock.c
+++ b/net/ipv4/inet_connection_sock.c
@@ -695,17 +695,7 @@ struct sock *inet_csk_clone_lock(const struct sock *sk,
 		/* Deinitialize accept_queue to trap illegal accesses. */
 		memset(&newicsk->icsk_accept_queue, 0, sizeof(newicsk->icsk_accept_queue));
 
-		/*
-		 * Tempesta: need this check when we know src port of the new
-		 * socket request and the new socket is just created: there is
-		 * still not so much work done, but we already can set
-		 * sk_security for it.
-		 */
-		if (security_inet_csk_clone(newsk, req)) {
-			bh_unlock_sock(newsk);
-			sk_free(newsk);
-			return NULL;
-		}
+		security_inet_csk_clone(newsk, req);
 	}
 	return newsk;
 }
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index 7999fc55..9d73acbf 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -62,6 +62,7 @@
 #include <linux/init.h>
 #include <linux/times.h>
 #include <linux/slab.h>
+#include <linux/tempesta.h>
 
 #include <net/net_namespace.h>
 #include <net/icmp.h>
@@ -1716,6 +1717,14 @@ struct sock *tcp_v4_syn_recv_sock(struct sock *sk, struct sk_buff *skb,
 	}
 #endif
 
+#ifdef CONFIG_SECURITY_TEMPESTA
+	/*
+	 * We need already initialized socket addresses,
+	 * so there is no appropriate security hook.
+	 */
+	if (tempesta_new_clntsk(newsk))
+		goto put_and_exit;
+#endif
 	if (__inet_inherit_port(sk, newsk) < 0)
 		goto put_and_exit;
 	__inet_hash_nolisten(newsk, NULL);
diff --git a/net/ipv6/tcp_ipv6.c b/net/ipv6/tcp_ipv6.c
index 68ecb967..0fd4f0b8 100644
--- a/net/ipv6/tcp_ipv6.c
+++ b/net/ipv6/tcp_ipv6.c
@@ -39,6 +39,7 @@
 #include <linux/ipsec.h>
 #include <linux/times.h>
 #include <linux/slab.h>
+#include <linux/tempesta.h>
 
 #include <linux/ipv6.h>
 #include <linux/icmpv6.h>
@@ -1255,7 +1256,17 @@ static struct sock * tcp_v6_syn_recv_sock(struct sock *sk, struct sk_buff *skb,
 			       sk_gfp_atomic(sk, GFP_ATOMIC));
 	}
 #endif
-
+#ifdef CONFIG_SECURITY_TEMPESTA
+	/*
+	 * We need already initialized socket addresses,
+	 * so there is no appropriate security hook.
+	 */
+	if (tempesta_new_clntsk(newsk)) {
+		inet_csk_prepare_forced_close(newsk);
+		tcp_done(newsk);
+		goto out;
+	}
+#endif
 	if (__inet_inherit_port(sk, newsk) < 0) {
 		inet_csk_prepare_forced_close(newsk);
 		tcp_done(newsk);
diff --git a/security/security.c b/security/security.c
index 7fed9855..f87302a7 100644
--- a/security/security.c
+++ b/security/security.c
@@ -1227,10 +1227,10 @@ int security_inet_conn_request(struct sock *sk,
 }
 EXPORT_SYMBOL(security_inet_conn_request);
 
-int security_inet_csk_clone(struct sock *newsk,
+void security_inet_csk_clone(struct sock *newsk,
 			const struct request_sock *req)
 {
-	return security_ops->inet_csk_clone(newsk, req);
+	security_ops->inet_csk_clone(newsk, req);
 }
 
 void security_inet_conn_established(struct sock *sk,
diff --git a/security/tempesta/tempesta_lsm.c b/security/tempesta/tempesta_lsm.c
index d7a21a8a..2a44ce3d 100644
--- a/security/tempesta/tempesta_lsm.c
+++ b/security/tempesta/tempesta_lsm.c
@@ -18,11 +18,12 @@
  * this program; if not, write to the Free Software Foundation, Inc., 59
  * Temple Place - Suite 330, Boston, MA 02111-1307, USA.
  */
+#include <linux/ipv6.h>
 #include <linux/security.h>
 #include <linux/spinlock.h>
 #include <linux/tempesta.h>
 
-static TempestaOps __rcu *tempesta_ops;
+static TempestaOps __rcu *tempesta_ops = NULL;
 static DEFINE_SPINLOCK(tops_lock);
 
 void
@@ -59,10 +60,10 @@ tempesta_unregister_ops(TempestaOps *tops)
 }
 EXPORT_SYMBOL(tempesta_unregister_ops);
 
-static int
-tempesta_sk_new(struct sock *newsk, const struct request_sock *req)
+int
+tempesta_new_clntsk(struct sock *newsk)
 {
-	int r;
+	int r = 0;
 
 	TempestaOps *tops;
 
@@ -76,8 +77,9 @@ tempesta_sk_new(struct sock *newsk, const struct request_sock *req)
 
 	rcu_read_unlock();
 
-	return 0;
+	return r;
 }
+EXPORT_SYMBOL(tempesta_new_clntsk);
 
 static void
 tempesta_sk_free(struct sock *sk)
@@ -115,14 +117,7 @@ tempesta_sock_tcp_rcv(struct sock *sk, struct sk_buff *skb)
 	return r;
 }
 
-/*
- * socket_post_create is relatively late phase when a lot of work already
- * done and sk_alloc_security looks more attractive. However, the last one
- * is called by sk_alloc() before inet_create() before initializes
- * inet_sock->inet_sport, so we can't use it.
- */
 static struct security_operations tempesta_sec_ops __read_mostly = {
-	.inet_csk_clone		= tempesta_sk_new,
 	.sk_free_security	= tempesta_sk_free,
 	.socket_sock_rcv_skb	= tempesta_sock_tcp_rcv,
 };
