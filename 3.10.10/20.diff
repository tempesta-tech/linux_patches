commit 7fa17f7a48487b9c144c9aee5e6c3bddcb94b14e
Author: Alexander K <ak@natsys-lab.com>
Date:   Sun Oct 11 20:11:37 2015 +0300

    Undoo https://github.com/krizhanovsky/linux-3.10.10-sync_sockets/commit/926bef5ea8b1df0136c6bfae41c50984a14c787a, see https://github.com/krizhanovsky/linux-3.10.10-sync_sockets/commit/926bef5ea8b1df0136c6bfae41c50984a14c787a

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 69ae157c..f620738a 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -631,7 +631,6 @@ static inline struct rtable *skb_rtable(const struct sk_buff *skb)
 }
 
 extern void kfree_skb(struct sk_buff *skb);
-extern void kfree_skb_untraced(struct sk_buff *skb);
 extern void kfree_skb_list(struct sk_buff *segs);
 extern void skb_tx_error(struct sk_buff *skb);
 extern void consume_skb(struct sk_buff *skb);
diff --git a/include/net/sock.h b/include/net/sock.h
index 436c4d85..66772cf8 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1417,7 +1417,7 @@ static inline void sk_wmem_free_skb(struct sock *sk, struct sk_buff *skb)
 	sock_set_flag(sk, SOCK_QUEUE_SHRUNK);
 	sk->sk_wmem_queued -= skb->truesize;
 	sk_mem_uncharge(sk, skb->truesize);
-	kfree_skb_untraced(skb);
+	__kfree_skb(skb);
 }
 
 /* Used by processes to "lock" a socket state, so that
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 58647023..ecc80f9e 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -699,28 +699,6 @@ void consume_skb(struct sk_buff *skb)
 }
 EXPORT_SYMBOL(consume_skb);
 
-/**
- *	kfree_skb_untraced - free an skbuff
- *	@skb: buffer to free
- *
- *	Drop a reference to the buffer and free it if the usage count has
- *	hit zero. Functions identically to kfree_skb() or consume_skb(),
- *	but kfree_skb_untraced() doesn't make any assumptions on semantics,
- *	i.e. whether the frame is being dropped after a failure or consumed.
- *	Consequently, it doesn't contain any instrumentation for tracing.
- */
-void kfree_skb_untraced(struct sk_buff *skb)
-{
-	if (unlikely(!skb))
-		return;
-	if (likely(atomic_read(&skb->users) == 1))
-		smp_rmb();
-	else if (likely(!atomic_dec_and_test(&skb->users)))
-		return;
-	__kfree_skb(skb);
-}
-EXPORT_SYMBOL(kfree_skb_untraced);
-
 static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 {
 	new->tstamp		= old->tstamp;
