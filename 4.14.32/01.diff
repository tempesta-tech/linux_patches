commit de04f6d6f5b136590b659e9a5bb165dbda0ef95b
Author: Alexander K <ak@natsys-lab.com>
Date:   Mon Jun 25 15:39:08 2018 +0300

    tcp_write_xmit() hook to create dynamically-sized TLS records

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index e6438bfa..7f636349 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -854,6 +854,52 @@ struct sk_buff {
 #define SKB_ALLOC_RX		0x02
 #define SKB_ALLOC_NAPI		0x04
 
+#ifdef CONFIG_SECURITY_TEMPESTA
+/**
+ * The skb mark are used only for time between @skb was inserted into TCP send
+ * queue and it's processed (first time) in tcp_write_xmit(). This time the @skb
+ * isn't scheduled yet, so we can use skb->dev for our needs to avoid extending
+ * sk_buff. We use the least significant bit to be sure that the this isn't a
+ * pointer to not to break anything. TLS message type << 1 is alwasy smaller
+ * than 0xff.
+ */
+static inline int
+tempesta_tls_skb_settype(struct sk_buff *skb, unsigned char type)
+{
+	BUG_ON(type >= 0x80);
+	if (unlikely(skb->dev)) {
+		WARN_ON_ONCE(skb->dev);
+		return -EINVAL;
+	}
+	skb->dev = (void *)((type << 1) | 1UL);
+}
+
+static inline unsigned char
+tempesta_tls_skb_type(struct sk_buff *skb)
+{
+	unsigned long d = (unsigned long)skb->dev;
+
+	if (unlikely(d ^ 1UL))
+		return 0;
+	return d >> 1;
+}
+
+static inline void
+tempesta_tls_skb_typecp(struct sk_buff *dst, struct sk_buff *src)
+{
+	dst->dev = src->dev;
+}
+
+static inline void
+tempesta_tls_skb_clear(struct sk_buff *skb)
+{
+	unsigned long d = (unsigned long)skb->dev;
+
+	WARN_ON_ONCE(d & ~0xff);
+	skb->dev = NULL;
+}
+#endif
+
 /* Returns true if the skb was allocated from PFMEMALLOC reserves */
 static inline bool skb_pfmemalloc(const struct sk_buff *skb)
 {
diff --git a/include/net/sock.h b/include/net/sock.h
index ece2126c..b914e197 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -471,6 +471,10 @@ struct sock {
 	void			(*sk_state_change)(struct sock *sk);
 	void			(*sk_data_ready)(struct sock *sk);
 	void			(*sk_write_space)(struct sock *sk);
+#ifdef CONFIG_SECURITY_TEMPESTA
+	int			(*sk_write_xmit)(struct sock *sk,
+						 struct sk_buff *skb);
+#endif
 	void			(*sk_error_report)(struct sock *sk);
 	int			(*sk_backlog_rcv)(struct sock *sk,
 						  struct sk_buff *skb);
diff --git a/include/net/tcp.h b/include/net/tcp.h
index b2a6ca58..0f6bd0cf 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -1719,6 +1719,9 @@ static inline void tcp_insert_write_queue_after(struct sk_buff *skb,
 						struct sk_buff *buff,
 						struct sock *sk)
 {
+#ifdef CONFIG_SECURITY_TEMPESTA
+	tempesta_tls_skb_typecp(buff, skb);
+#endif
 	__skb_queue_after(&sk->sk_write_queue, skb, buff);
 }
 
diff --git a/include/net/tls.h b/include/net/tls.h
index df950383..c3d45c5e 100644
--- a/include/net/tls.h
+++ b/include/net/tls.h
@@ -55,6 +55,12 @@
 
 #define TLS_AAD_SPACE_SIZE		13
 
+#ifdef CONFIG_SECURITY_TEMPESTA
+#define TLS_MAX_TAG_SZ			16
+/* Maximum size for required skb overhead: header, IV, tag. */
+#define TLS_MAX_OVERHEAD		(TLS_AAD_SPACE_SIZE + TLS_MAX_TAG_SZ)
+#endif
+
 struct tls_sw_context {
 	struct crypto_aead *aead_send;
 
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index c6e64e8f..f9f39378 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -37,6 +37,9 @@
 #define pr_fmt(fmt) "TCP: " fmt
 
 #include <net/tcp.h>
+#ifdef CONFIG_SECURITY_TEMPESTA
+#include <net/tls.h>
+#endif
 
 #include <linux/compiler.h>
 #include <linux/gfp.h>
@@ -2324,6 +2327,20 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 		}
 
 		limit = mss_now;
+#ifdef CONFIG_SECURITY_TEMPESTA
+		if (sk->sk_write_xmit && tempesta_tls_skb_type(skb)) {
+			if (unlikely(limit <= TLS_MAX_MSG_OVERHEAD)) {
+				net_warn_ratelimited("%s: too small MSS %u"
+						     " for TLS\n",
+						     __func__, mss_now);
+				break;
+			}
+			if (limit < TLS_MAX_PAYLOAD_SIZE)
+				limit -= TLS_MAX_MSG_OVERHEAD;
+			else
+				limit = TLS_MAX_PAYLOAD_SIZE;
+		}
+#endif
 		if (tso_segs > 1 && !tcp_urg_mode(tp))
 			limit = tcp_mss_split_point(sk, skb, mss_now,
 						    min_t(unsigned int,
@@ -2339,7 +2356,23 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 			clear_bit(TCP_TSQ_DEFERRED, &sk->sk_tsq_flags);
 		if (tcp_small_queue_check(sk, skb, 0))
 			break;
-
+#ifdef CONFIG_SECURITY_TEMPESTA
+		/*
+		 * This isn't the only place where tcp_transmit_skb() is called,
+		 * but this is the only place were we are from Tempesta FW
+		 * ss_do_send(), so call the hook here. At this point, with
+		 * @limit adjusted above, we have exact understanding how much
+		 * data we can and should send to the peer, so we call
+		 * encryption here and get the best TLS record size.
+		 *
+		 * TODO Sometimes HTTP servers send headers and response body in
+		 * different TCP segments, so coalese skbs for transmission to
+		 * get 16KB (maximum size of TLS message).
+		 */
+		if (sk->sk_write_xmit && tempesta_tls_skb_type(skb))
+			if (unlikely(sk->sk_write_xmit(sk, skb)))
+				break;
+#endif
 		if (unlikely(tcp_transmit_skb(sk, skb, 1, gfp)))
 			break;
 
