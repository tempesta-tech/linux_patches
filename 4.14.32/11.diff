commit edc175573dd651b4ffc985a2dd738c78a4751d16
Author: Alexander K <ak@natsys-lab.com>
Date:   Sun Dec 30 17:12:19 2018 +0300

    Fix couple misspels (code review)

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 15e9d293..0d90fcf0 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -866,7 +866,7 @@ struct sk_buff {
  * queue and it's processed (first time) in tcp_write_xmit(). This time the @skb
  * isn't scheduled yet, so we can use skb->dev for our needs to avoid extending
  * sk_buff. We use the least significant bit to be sure that this isn't a
- * pointer to not to break anything. TLS message type << 1 is alwasy smaller
+ * pointer to not to break anything. TLS message type << 1 is always smaller
  * than 0xff.
  */
 static inline void
diff --git a/net/ipv4/tcp_output.c b/net/ipv4/tcp_output.c
index c1f604a5..4e79cb5e 100644
--- a/net/ipv4/tcp_output.c
+++ b/net/ipv4/tcp_output.c
@@ -2358,14 +2358,14 @@ static bool tcp_write_xmit(struct sock *sk, unsigned int mss_now, int nonagle,
 #ifdef CONFIG_SECURITY_TEMPESTA
 		/*
 		 * This isn't the only place where tcp_transmit_skb() is called,
-		 * but this is the only place were we are from Tempesta FW
+		 * but this is the only place where we are from Tempesta FW
 		 * ss_do_send(), so call the hook here. At this point, with
 		 * @limit adjusted above, we have exact understanding how much
 		 * data we can and should send to the peer, so we call
 		 * encryption here and get the best TLS record size.
 		 *
 		 * TODO Sometimes HTTP servers send headers and response body in
-		 * different TCP segments, so coalese skbs for transmission to
+		 * different TCP segments, so coalesce skbs for transmission to
 		 * get 16KB (maximum size of TLS message).
 		 */
 		if (sk->sk_write_xmit && tempesta_tls_skb_type(skb)) {
