commit 159f24f6c6790656b465bd991cc78f7c7ba25c4c
Author: Alexander K <ak@tempesta-tech.com>
Date:   Tue Apr 21 00:09:28 2020 +0300

    Add skb accounting. Quite useful for memory leaks hunting

diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index 0d90fcf0..606bb14c 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -861,6 +861,8 @@ struct sk_buff {
 #define SKB_ALLOC_NAPI		0x04
 
 #ifdef CONFIG_SECURITY_TEMPESTA
+long __get_skb_count(void);
+
 /**
  * The skb type is used only for time between @skb was inserted into TCP send
  * queue and it's processed (first time) in tcp_write_xmit(). This time the @skb
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 92e9a635..d8e2aefa 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -437,6 +437,25 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	goto out;
 }
 #else
+
+/*
+ * Skb can be allocated and freed on different CPUs,
+ * so the counter can be negative.
+ */
+static DEFINE_PER_CPU(long, __skb_cnt) ____cacheline_aligned = 0;
+
+long
+__get_skb_count(void)
+{
+	int cpu;
+	long count = 0;
+
+	for_each_online_cpu(cpu)
+		count += *per_cpu_ptr(&__skb_cnt, cpu);
+
+	return count;
+}
+EXPORT_SYMBOL(__get_skb_count);
 /**
  * Tempesta: allocate skb on the same page with data to improve space locality
  * and make head data fragmentation easier.
@@ -469,6 +488,8 @@ __alloc_skb(unsigned int size, gfp_t gfp_mask, int flags, int node)
 	skb->head_frag = 1;
 	skb->skb_page = 1;
 
+	++*this_cpu_ptr(&__skb_cnt);
+
 	return skb;
 }
 #endif
@@ -801,9 +822,10 @@ static void kfree_skbmem(struct sk_buff *skb)
 	switch (skb->fclone) {
 	case SKB_FCLONE_UNAVAILABLE:
 #ifdef CONFIG_SECURITY_TEMPESTA
-		if (skb->skb_page)
+		if (skb->skb_page) {
 			put_page(virt_to_page(skb));
-		else
+			--*this_cpu_ptr(&__skb_cnt);
+		} else
 #endif
 			kmem_cache_free(skbuff_head_cache, skb);
 		return;
@@ -829,6 +851,7 @@ static void kfree_skbmem(struct sk_buff *skb)
 #ifdef CONFIG_SECURITY_TEMPESTA
 	BUG_ON(!skb->skb_page);
 	put_page(virt_to_page(skb));
+	--*this_cpu_ptr(&__skb_cnt);
 #else
 	kmem_cache_free(skbuff_fclone_cache, fclones);
 #endif
@@ -1529,6 +1552,8 @@ struct sk_buff *skb_clone(struct sk_buff *skb, gfp_t gfp_mask)
 		n->fclone = SKB_FCLONE_UNAVAILABLE;
 #ifdef CONFIG_SECURITY_TEMPESTA
 		n->skb_page = 0;
+
+		++*this_cpu_ptr(&__skb_cnt);
 #endif
 	}
 
