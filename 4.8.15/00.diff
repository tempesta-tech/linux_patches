commit b53d7d52fc9d8cd5a4fb354a6bea0cfb4a413ff1
Author: Alexander K <ak@natsys-lab.com>
Date:   Tue Dec 27 20:17:44 2016 +0300

    __do_softirq() can be called from many places, so protect FPU usage in all of them; some cleanups from 4.1.27 port

diff --git a/arch/x86/entry/entry_64.S b/arch/x86/entry/entry_64.S
index b71c3f44..02fff3eb 100644
--- a/arch/x86/entry/entry_64.S
+++ b/arch/x86/entry/entry_64.S
@@ -824,11 +824,7 @@ ENTRY(do_softirq_own_stack)
 	incl	PER_CPU_VAR(irq_count)
 	cmove	PER_CPU_VAR(irq_stack_ptr), %rsp
 	push	%rbp				/* frame pointer backlink */
-#ifdef CONFIG_SECURITY_TEMPESTA
-	call __tempesta_do_softirq_fpusafe
-#else
 	call	__do_softirq
-#endif
 	leaveq
 	decl	PER_CPU_VAR(irq_count)
 	ret
diff --git a/arch/x86/kernel/irq_64.c b/arch/x86/kernel/irq_64.c
index 664dc8c2..4a790371 100644
--- a/arch/x86/kernel/irq_64.c
+++ b/arch/x86/kernel/irq_64.c
@@ -67,26 +67,6 @@ static inline void stack_overflow_check(struct pt_regs *regs)
 #endif
 }
 
-#ifdef CONFIG_SECURITY_TEMPESTA
-/* Tempesta supports x86-64 only. */
-#include <asm/fpu/api.h>
-
-void
-__tempesta_do_softirq_fpusafe(void)
-{
-	/*
-	 * Switch FPU context once per budget packets to let Tempesta
-	 * run many vector operations w/o costly FPU switches.
-	 * Eager FPU must be enabled.
-	 */
-	kernel_fpu_begin();
-
-	__do_softirq();
-
-	kernel_fpu_end();
-}
-#endif
-
 bool handle_irq(struct irq_desc *desc, struct pt_regs *regs)
 {
 	stack_overflow_check(regs);
diff --git a/include/net/sock.h b/include/net/sock.h
index d7cacaaa..2f423230 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -1675,8 +1675,7 @@ static inline void sk_rethink_txhash(struct sock *sk)
 static inline struct dst_entry *
 __sk_dst_get(struct sock *sk)
 {
-	return rcu_dereference_check(sk->sk_dst_cache,
-				     lockdep_sock_is_held(sk));
+	return rcu_dereference_raw(sk->sk_dst_cache);
 }
 
 static inline struct dst_entry *
diff --git a/include/uapi/linux/netlink.h b/include/uapi/linux/netlink.h
index 17f3a145..82910ffc 100644
--- a/include/uapi/linux/netlink.h
+++ b/include/uapi/linux/netlink.h
@@ -27,7 +27,7 @@
 #define NETLINK_ECRYPTFS	19
 #define NETLINK_RDMA		20
 #define NETLINK_CRYPTO		21	/* Crypto layer */
-#define NETLINK_TEMPESTA	22
+#define NETLINK_TEMPESTA	22	/* TODO remove me */
 
 #define NETLINK_INET_DIAG	NETLINK_SOCK_DIAG
 
diff --git a/kernel/softirq.c b/kernel/softirq.c
index 44a2bced..cae056b3 100644
--- a/kernel/softirq.c
+++ b/kernel/softirq.c
@@ -26,6 +26,7 @@
 #include <linux/smpboot.h>
 #include <linux/tick.h>
 #include <linux/irq.h>
+#include <asm/fpu/api.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/irq.h>
@@ -250,6 +251,8 @@ asmlinkage __visible void __softirq_entry __do_softirq(void)
 	__local_bh_disable_ip(_RET_IP_, SOFTIRQ_OFFSET);
 	in_hardirq = lockdep_softirq_start();
 
+	kernel_fpu_begin();
+
 restart:
 	/* Reset the pending bitmask before enabling irqs */
 	set_softirq_pending(0);
@@ -294,6 +297,7 @@ restart:
 		wakeup_softirqd();
 	}
 
+	kernel_fpu_end();
 	lockdep_softirq_end(in_hardirq);
 	account_irq_exit_time(current);
 	__local_bh_enable(SOFTIRQ_OFFSET);
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index ec83b964..354a4d69 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -157,8 +157,7 @@ int tcp_v4_connect(struct sock *sk, struct sockaddr *uaddr, int addr_len)
 		return -EAFNOSUPPORT;
 
 	nexthop = daddr = usin->sin_addr.s_addr;
-	inet_opt = rcu_dereference_protected(inet->inet_opt,
-					     lockdep_sock_is_held(sk));
+	inet_opt = rcu_dereference_raw(inet->inet_opt);
 	if (inet_opt && inet_opt->opt.srr) {
 		if (!daddr)
 			return -EINVAL;
