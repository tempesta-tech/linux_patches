commit 608c0a2fb8e23bc66e6a31ab52813b798c50153c
Author: Alexander K <ak@natsys-lab.com>
Date:   Fri Jun 30 02:27:11 2017 +0300

    Fix https://github.com/tempesta-tech/tempesta/issues/668; leave nested locking on RX path for Tempesta

diff --git a/include/net/sock.h b/include/net/sock.h
index 196f9f91..84bb38bc 100644
--- a/include/net/sock.h
+++ b/include/net/sock.h
@@ -875,14 +875,9 @@ static inline int sk_backlog_rcv(struct sock *sk, struct sk_buff *skb)
 	return sk->sk_backlog_rcv(sk, skb);
 }
 
-#define TFW_SK_CPU_INIT	USHRT_MAX
-
 static inline void sk_incoming_cpu_update(struct sock *sk)
 {
-#ifdef CONFIG_SECURITY_TEMPESTA
-	if (sk->sk_incoming_cpu == TFW_SK_CPU_INIT)
-#endif
-		sk->sk_incoming_cpu = raw_smp_processor_id();
+	sk->sk_incoming_cpu = raw_smp_processor_id();
 }
 
 static inline void sock_rps_record_flow_hash(__u32 hash)
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 90bf7644..d2bd601a 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -280,8 +280,13 @@ do {									\
 	if (!pg)
 		return NULL;
 	ptr = (char *)page_address(pg);
+	/*
+	 * Don't try to split compound page.
+	 * TODO compound pages can be split as __alloc_page_frag() does it
+	 * using fragment size in page reference counter.
+	 */
 	if (po)
-		return ptr; /* don't try to split compound page */
+		return ptr;
 	o = PAGE_SHIFT - PG_CHUNK_BITS;
 
 	PREEMPT_CTX_DISABLE();
diff --git a/net/ipv4/tcp_ipv4.c b/net/ipv4/tcp_ipv4.c
index b2169a40..9d4101de 100644
--- a/net/ipv4/tcp_ipv4.c
+++ b/net/ipv4/tcp_ipv4.c
@@ -1684,7 +1684,16 @@ process:
 
 	sk_incoming_cpu_update(sk);
 
+#ifdef CONFIG_SECURITY_TEMPESTA
+	/*
+	 * The socket is just retrieved by __inet_lookup_skb(), so there is
+	 * no real nested locking yet. Leave the nested locking possiblity to
+	 * Tempesta.
+	 */
+	bh_lock_sock(sk);
+#else
 	bh_lock_sock_nested(sk);
+#endif
 	tcp_segs_in(tcp_sk(sk), skb);
 	ret = 0;
 	if (!sock_owned_by_user(sk)) {
