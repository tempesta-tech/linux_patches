commit 9add852a07be2b59deca4d41dbff589ae66359bb
Author: Alexander K <ak@natsys-lab.com>
Date:   Thu Oct 12 01:13:28 2017 +0300

    Small fixes for skb pages allocation; export native skb_entail()

diff --git a/include/net/tcp.h b/include/net/tcp.h
index 545f52bb..c67b087d 100644
--- a/include/net/tcp.h
+++ b/include/net/tcp.h
@@ -614,6 +614,7 @@ extern void tcp_mark_push(struct tcp_sock *tp, struct sk_buff *skb);
 extern void tcp_init_nondata_skb(struct sk_buff *skb, u32 seq, u8 flags);
 extern void tcp_queue_skb(struct sock *sk, struct sk_buff *skb);
 extern int tcp_close_state(struct sock *sk);
+extern void skb_entail(struct sock *sk, struct sk_buff *skb);
 
 /* Read 'sendfile()'-style from a TCP socket */
 int tcp_read_sock(struct sock *sk, read_descriptor_t *desc,
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 6d564e10..5cbfdae3 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -157,7 +157,7 @@ out:
 #else
 /*
  * Chunks of size 512B, 1KB and 2KB.
- * Typical sk_buff requires ~248B or ~504B (for fclone),
+ * Typical sk_buff requires ~272B or ~552B (for fclone),
  * skb_shared_info is ~320B.
  */
 #define PG_LISTS_N		3
@@ -273,21 +273,26 @@ do {									\
 
 	PREEMPT_CTX_ENABLE();
 
-	/* Add compound page metadata, if page order is > 0. */
-	gfp_mask |= __GFP_NOWARN | __GFP_NOMEMALLOC | __GFP_NORETRY
-		    | (po ? __GFP_COMP : 0);
+	/*
+	 * Add compound page metadata, if page order is > 0.
+	 * Don't use __GFP_NOMEMALLOC to allow caller access reserved pools if
+	 * it requested so.
+	 */
+	gfp_mask |= __GFP_NOWARN | __GFP_NORETRY | (po ? __GFP_COMP : 0);
 	pg = alloc_pages_node(node, gfp_mask, po);
 	if (!pg)
 		return NULL;
 	ptr = (char *)page_address(pg);
 	/*
-	 * Don't try to split compound page.
+	 * Don't try to split compound page. Also don't try to reuse pages
+	 * from reserved memory areas making them putted and freed quicker.
+	 *
 	 * TODO compound pages can be split as __alloc_page_frag() does it
 	 * using fragment size in page reference counter. Large messages
 	 * (e.g. large HTML pages returned by a backend server) go this way
 	 * and allocate compound pages.
 	 */
-	if (po)
+	if (po || page_is_pfmemalloc(pg))
 		return ptr;
 	o = PAGE_SHIFT - PG_CHUNK_BITS;
 
diff --git a/net/ipv4/tcp.c b/net/ipv4/tcp.c
index c70b1818..6944a4ad 100644
--- a/net/ipv4/tcp.c
+++ b/net/ipv4/tcp.c
@@ -604,7 +604,7 @@ static inline bool forced_push(const struct tcp_sock *tp)
 	return after(tp->write_seq, tp->pushed_seq + (tp->max_window >> 1));
 }
 
-static void skb_entail(struct sock *sk, struct sk_buff *skb)
+void skb_entail(struct sock *sk, struct sk_buff *skb)
 {
 	struct tcp_sock *tp = tcp_sk(sk);
 	struct tcp_skb_cb *tcb = TCP_SKB_CB(skb);
@@ -622,6 +622,7 @@ static void skb_entail(struct sock *sk, struct sk_buff *skb)
 
 	tcp_slow_start_after_idle_check(sk);
 }
+EXPORT_SYMBOL(skb_entail);
 
 static inline void tcp_mark_urg(struct tcp_sock *tp, int flags)
 {
